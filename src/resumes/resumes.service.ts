import { Injectable, NotFoundException } from '@nestjs/common';
import { CreateResumeDto } from './dto/create-resume.dto';
import { UpdateResumeDto } from './dto/update-resume.dto';
import { InjectModel } from '@nestjs/mongoose';
import { Resume } from './entities/resume.entity';
import { Resumes, ResumesDocument } from './schemas/jobs.schemas';
import { SoftDeleteModel } from 'soft-delete-plugin-mongoose';
import { IUser } from 'src/users/user.interface';
import { isEmpty } from 'class-validator';
import aqp from 'api-query-params';
import { Types } from 'mongoose';

@Injectable()
export class ResumesService {
  constructor(
    @InjectModel(Resumes.name)
    private ResumesModel : SoftDeleteModel<ResumesDocument>
  ){}
  create(createResumeDto: CreateResumeDto , user : IUser) {
    return this.ResumesModel.create({
      ...createResumeDto,
      email : user.email,
      userId : user._id,
      status : "PENDING",
      history:[{
        status : "PENDING",
        updatedAt : new Date(),
        updatedBy : {
          _id : user._id,
          email : user.email
        }
      }],
      createdBy : {
        _id : user._id,
        email : user.email
      }
    });
  }

  async findAll(currentPage: number, limit: number, qs) {

  // Parse query string th√†nh filter, sort, populate d√πng th∆∞ vi·ªán aqp
  // filter l√† ph·∫ßn chinh, th∆∞ vi·ªán ƒë√£ l√†m h·∫øt r·ªìi , t·ª± ƒë·ªông convert sang moogodb
  let { filter, sort, population} = aqp(qs);

  // X√≥a page v√† limit kh·ªèi filter ƒë·ªÉ tr√°nh ·∫£nh h∆∞·ªüng ƒë·∫øn truy v·∫•n MongoDB
  delete filter.current;
  delete filter.pageSize;

  // In ra filter v√† populate ƒë·ªÉ debug
  console.log("filter",filter);
  // üëâ Bi·∫øn c√°c tr∆∞·ªùng string th√†nh regex n·∫øu mu·ªën "search like"  || ph√≠a FE s·ª≠ l√Ω url c≈©ng dc /value/i
  // if (filter.name) {
  //   filter.name = { $regex: filter.name, $options: 'i' }; // like kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
  // }
  // T√≠nh to√°n offset cho ph√¢n trang (b·ªè qua bao nhi√™u b·∫£n ghi)
  let offset = (+currentPage - 1) * (+limit);

  // N·∫øu limit kh√¥ng h·ª£p l·ªá th√¨ m·∫∑c ƒë·ªãnh l√† 10
  let defaultLimit = +limit ? +limit : 10;

  // L·∫•y t·ªïng s·ªë b·∫£n ghi ph√π h·ª£p v·ªõi filter
  // ‚ö†Ô∏è C√≥ th·ªÉ thay b·∫±ng `countDocuments(filter)` ƒë·ªÉ hi·ªáu qu·∫£ h∆°n
  const totalItems = (await this.ResumesModel.find(filter)).length;

  // T√≠nh t·ªïng s·ªë trang
  const totalPages = Math.ceil(totalItems / defaultLimit);

  // N·∫øu kh√¥ng c√≥ sort th√¨ m·∫∑c ƒë·ªãnh sort theo -updatedAt (m·ªõi nh·∫•t tr∆∞·ªõc)
  if (isEmpty(sort)) {
    // @ts-ignore: Unreachable code error (b·ªè qua c·∫£nh b√°o TS)
    sort = "-updatedAt";
  }

  // Truy v·∫•n danh s√°ch c√¥ng ty v·ªõi filter, ph√¢n trang, s·∫Øp x·∫øp, v√† populate
  // s·ª≠ d·ª•ng to√°n t·ª≠ like 

  const result = await this.ResumesModel.find(filter)
    .skip(offset) // b·ªè qua offset b·∫£n ghi
    .limit(defaultLimit) // gi·ªõi h·∫°n s·ªë l∆∞·ª£ng b·∫£n ghi tr·∫£ v·ªÅ
    // b·ªè qua check code typeScipt t·∫°i d√≤ng d∆∞·ªõi 
    // @ts-ignore: Unreachable code error (b·ªè qua l·ªói n·∫øu sort sai ki·ªÉu)
    .sort(sort) // any everywhere 
    .populate(population) // join b·∫£ng 
    .exec(); // th·ª±c thi query
  return {
    meta: {
    current: currentPage, //trang hi·ªán t·∫°i
    pageSize: limit, //s·ªë l∆∞·ª£ng b·∫£n ghi ƒë√£ l·∫•y
    pages: totalPages, //t·ªïng s·ªë trang v·ªõi ƒëi·ªÅu ki·ªán query
    total: totalItems // t·ªïng s·ªë ph·∫ßn t·ª≠ (s·ªë b·∫£n ghi)
    },
    result
  }
}
  async findOne(id: string) {
    const data = await this.ResumesModel.findOne({ _id: id });
    
    if (!data) {
      throw new NotFoundException('Kh√¥ng t√¨m th·∫•y CV ');
    }
    return data
  
  }

 async update(id: string, updateResumeDto: UpdateResumeDto, user: IUser) {
  return await this.ResumesModel.updateOne(
    { _id: id },
    {
      $set: {
        ...updateResumeDto,
        updatedBy: {
          _id: user._id,
          email: user.email,
        },
      },
      $push: {
        history: {
          status: updateResumeDto.status,
          updatedAt: new Date(),
          updatedBy: {
            _id: user._id,
            email: user.email,
          },
        },
      },
    }
  );
}


    async remove(id: string, user: IUser) {
    // x√≥a c·ª©ng
    // return this.CompanyModel.deleteOne({ _id: id });

    // x√≥a m√™m + them vi·ªác c·∫≠p nh·∫≠t  deleteBy
    await this.ResumesModel.updateOne(
      { _id: id },
      {
        deleteBy: {
          _id: user?._id || 1,
          email: user?.email || "Ng√¥ ƒë√¨nh ph∆∞·ªõc",
        },
      },
    );
    //isDeleted : true
    return this.ResumesModel.softDelete({ _id: id });
  }
  async findResumeUser(user : IUser) {
    // const userId = new Types.ObjectId(user._id.toString()); // √©p ki·ªÉu an to√†n
    const data = await this.ResumesModel.findOne({ userId : user._id });
    if (!data) {
      throw new NotFoundException('Kh√¥ng t√¨m th·∫•y CV c·ªßa User ');
    }
    return data
  }
}
