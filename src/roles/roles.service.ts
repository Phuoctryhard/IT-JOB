import { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';
import { CreateRoleDto } from './dto/create-role.dto';
import { UpdateRoleDto } from './dto/update-role.dto';
import { InjectModel } from '@nestjs/mongoose';
import { SoftDeleteModel } from 'soft-delete-plugin-mongoose';
import { Role, RoleDocument } from './schemas/roles.schemas';
import { IUser } from 'src/users/user.interface';
// import aqp from 'api-query-params';
import { isEmpty } from 'class-validator';
import { RoleEnum } from 'src/constants/role';

@Injectable()
export class RolesService {
   constructor(
      @InjectModel(Role.name)
      private RolesModel: SoftDeleteModel<RoleDocument>,
    ) {}
  create(createRoleDto: CreateRoleDto , user : IUser) {
  
    // tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng theo Scheme
    return this.RolesModel.create({
      ...createRoleDto,
      createBy: {
        _id: user?._id || null,
        email: user?.email || null,
      },
    });
  }

  async findAll(currentPage: number, limit: number, qs) {
  const aqp = (await import('api-query-params')).default;
  // Parse query string th√†nh filter, sort, populate d√πng th∆∞ vi·ªán aqp
  // filter l√† ph·∫ßn chinh, th∆∞ vi·ªán ƒë√£ l√†m h·∫øt r·ªìi , t·ª± ƒë·ªông convert sang moogodb
  let { filter, sort, population} = aqp(qs);

  // X√≥a page v√† limit kh·ªèi filter ƒë·ªÉ tr√°nh ·∫£nh h∆∞·ªüng ƒë·∫øn truy v·∫•n MongoDB
  delete filter.current;
  delete filter.pageSize;

  // In ra filter v√† populate ƒë·ªÉ debug
  console.log("filter",filter);
  // üëâ Bi·∫øn c√°c tr∆∞·ªùng string th√†nh regex n·∫øu mu·ªën "search like"  || ph√≠a FE s·ª≠ l√Ω url c≈©ng dc /value/i
  // if (filter.name) {
  //   filter.name = { $regex: filter.name, $options: 'i' }; // like kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
  // }
  // T√≠nh to√°n offset cho ph√¢n trang (b·ªè qua bao nhi√™u b·∫£n ghi)
  let offset = (+currentPage - 1) * (+limit);

  // N·∫øu limit kh√¥ng h·ª£p l·ªá th√¨ m·∫∑c ƒë·ªãnh l√† 10
  let defaultLimit = +limit ? +limit : 10;

  // L·∫•y t·ªïng s·ªë b·∫£n ghi ph√π h·ª£p v·ªõi filter
  // ‚ö†Ô∏è C√≥ th·ªÉ thay b·∫±ng `countDocuments(filter)` ƒë·ªÉ hi·ªáu qu·∫£ h∆°n
  const totalItems = (await this.RolesModel.find(filter)).length;

  // T√≠nh t·ªïng s·ªë trang
  const totalPages = Math.ceil(totalItems / defaultLimit);

  // N·∫øu kh√¥ng c√≥ sort th√¨ m·∫∑c ƒë·ªãnh sort theo -updatedAt (m·ªõi nh·∫•t tr∆∞·ªõc)
  if (isEmpty(sort)) {
    // @ts-ignore: Unreachable code error (b·ªè qua c·∫£nh b√°o TS)
    sort = "-updatedAt";
  }

  // Truy v·∫•n danh s√°ch c√¥ng ty v·ªõi filter, ph√¢n trang, s·∫Øp x·∫øp, v√† populate
  // s·ª≠ d·ª•ng to√°n t·ª≠ like 

  const result = await this.RolesModel.find(filter)
    .skip(offset) // b·ªè qua offset b·∫£n ghi
    .limit(defaultLimit) // gi·ªõi h·∫°n s·ªë l∆∞·ª£ng b·∫£n ghi tr·∫£ v·ªÅ
    // b·ªè qua check code typeScipt t·∫°i d√≤ng d∆∞·ªõi 
    // @ts-ignore: Unreachable code error (b·ªè qua l·ªói n·∫øu sort sai ki·ªÉu)
    .sort(sort) // any everywhere 
    .populate(population) // join b·∫£ng 
    .exec(); // th·ª±c thi query
  return {
    meta: {
    current: currentPage, //trang hi·ªán t·∫°i
    pageSize: limit, //s·ªë l∆∞·ª£ng b·∫£n ghi ƒë√£ l·∫•y
    pages: totalPages, //t·ªïng s·ªë trang v·ªõi ƒëi·ªÅu ki·ªán query
    total: totalItems // t·ªïng s·ªë ph·∫ßn t·ª≠ (s·ªë b·∫£n ghi)
    },
    result
  }
}

async findOne(id: string) {
  const data = await this.RolesModel.findOne({ _id: id }).populate({
    path : "permissions",
    select:{
      _id: 1,
      apiPath :1 ,
      name : 1,
      method:1,
      module :1
    }
  });
  
  if (!data) {
    throw new NotFoundException('Kh√¥ng t√¨m th·∫•y c√¥ng ty');
  }
  return data

}

 async update(id: string, updateRole: UpdateRoleDto, user: IUser) {
  // Ki·ªÉm tra n·∫øu name b·ªã thay ƒë·ªïi
  if (updateRole.name) {
    const existed = await this.RolesModel.findOne({
      name: updateRole.name,
      _id: { $ne: id }, // lo·∫°i tr·ª´ ch√≠nh n√≥
    });

    if (existed) {
      throw new BadRequestException('T√™n vai tr√≤ ƒë√£ t·ªìn t·∫°i.');
    }
  }

  return this.RolesModel.updateOne(
    { _id: id },
    {
      ...updateRole,
      updateBy: {
        _id: user?._id || 1,
        email: user?.email || 'Ng√¥ ƒë√¨nh ph∆∞·ªõc',
      },
    },
  );
}

async remove(id: string, user: IUser) {
  const role = await this.RolesModel.findById(id);

  if (!role) {
    throw new BadRequestException('Role kh√¥ng t·ªìn t·∫°i');
  }

  if (role.name === RoleEnum.ADMIN) {
    throw new BadRequestException('Kh√¥ng ƒë∆∞·ª£c ph√©p x√≥a role Admin');
  }

  // C·∫≠p nh·∫≠t ng∆∞·ªùi x√≥a
  await this.RolesModel.updateOne(
    { _id: id },
    {
      deleteBy: {
        _id: user?._id || 1,
        email: user?.email || 'Ng√¥ ƒë√¨nh ph∆∞·ªõc',
      },
    },
  );

  // Soft delete (isDeleted: true + deletedAt)
  return this.RolesModel.softDelete({ _id: id });
}
}
